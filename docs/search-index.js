var N=null,E="",T="t",U="u",searchIndex={};
var R=["weekday","option","string","tableerror","result","to_owned","clone_into","to_string","try_from","try_into","borrow_mut","type_id","datetime","fixedoffset","Convert this `DateTime<Local>` instance into a…","systemtime","Convert this `DateTime<FixedOffset>` instance into a…","Convert this `DateTime<Utc>` instance into a…","ordering","parseerror","from_str","duration","ordinal0","iso_week","with_year","with_month","with_month0","with_day","with_day0","with_ordinal","with_ordinal0","formatter","localresult","naivedate","naivedatetime","Formats the combined date and time with the specified…","delayedformat","strftimeitems","Makes a new `FixedOffset` for the Eastern Hemisphere with…","Makes a new `FixedOffset` for the Western Hemisphere with…","Datelike","TableError","DateTime","FixedOffset","ISO 8601 combined date and time with time zone.","The common set of methods for date component.","Returns the year number in the calendar date.","Returns the absolute year number starting from 1 with a…","Returns the month number starting from 1.","Returns the month number starting from 0.","Returns the day of month starting from 1.","Returns the day of month starting from 0.","Returns the day of year starting from 1.","Returns the day of year starting from 0.","Returns the day of week.","Returns the ISO week.","Makes a new value with the year number changed.","Makes a new value with the month number (starting from 1)…","Makes a new value with the month number (starting from 0)…","Makes a new value with the day of month (starting from 1)…","Makes a new value with the day of month (starting from 0)…","Makes a new value with the day of year (starting from 1)…","Makes a new value with the day of year (starting from 0)…","num_days_from_ce","Returns the number of days since January 1, Year 1 (aka…","The time zone with fixed offset, from UTC-23:59:59 to…","year_ce","borrow","typeid","ordinal","isoweek","ndtable","timeseries","headers","timeseries::enums","contains_key","range_mut","rangemut","split_off","iter_mut","values_mut","valuesmut","is_empty","slice_owned","slice_inplace","swap_columns","indexorcolumn","set_meta_data","set_meta_key","get_meta_key","IndexOrColumn","BtreeMapTrait","TableTrait","TableMetaTrait","DateTable","tablereaderror","hashmap","into_iter","IterRows","TableReadError"];
searchIndex["timeseries"]={"doc":E,"i":[[3,R[41],R[72],E,N,N],[3,R[99],E,E,N,N],[3,"NdTable",E,E,N,N],[12,R[73],E,E,0,N],[12,"data",E,E,0,N],[3,"Table",E,E,N,N],[12,R[73],E,E,1,N],[12,"data",E,E,1,N],[12,"meta_data",E,E,1,N],[3,R[98],E,E,N,N],[12,R[73],E,E,2,N],[12,"iter",E,E,2,N],[3,"Row",E,E,N,N],[12,"index",E,E,3,N],[5,"read_csv_to_datetable",E,E,N,[[["reader"],["f"]],[[R[4],["table",R[95]]],["table",[R[2]]],[R[95]]]]],[11,"new",E,E,4,[[[R[2]],["into",[R[2]]]],[R[3]]]],[11,"new",E,E,5,[[[R[2]],["into",[R[2]]]],[R[95]]]],[11,"new",E,E,0,[[[R[2]],["vec",[R[2]]],["vec"],["array"]],[[R[71]],[R[3]],[R[4],[R[71],R[3]]]]]],[11,"new_btreemap",E,E,1,[[["btreemap",["vec"]],[R[2]],["vec",[R[2]]],["vec"]],["table"]]],[11,"new",E,E,1,[[[R[2]],["vec",[R[2]]],["vec"],["vec",["vec"]],["vec"]],[["table"],[R[3]],[R[4],["table",R[3]]]]]],[11,"from_map",E,"Creates table from data in this form: `json { 1: { \"test\":…",1,[[[R[96]]],["table"]]],[11,"from_map_checked",E,"Creates table from data in this form and returns an error…",1,[[[R[96]]],[["table"],[R[3]],[R[4],["table",R[3]]]]]],[11,"from_map_safe",E,"Creates table from data in this form, and return a table…",1,[[[R[96]]],[[R[1]],["table",[R[1]]]]]],[11,"iter_rows",E,E,1,[[["self"]],[["iterrows",[R[2]]],[R[2]]]]],[0,"enums",E,E,N,N],[4,R[90],R[74],E,N,N],[13,"Column",E,E,6,N],[13,"Index",E,E,6,N],[6,R[94],R[72],E,N,N],[8,R[91],E,"Trait that passes the methods from the BTreeMap.",N,N],[10,"clear",E,E,7,[[["self"]]]],[10,"get",E,E,7,[[["self"],["q"]],[[R[1]],["v"]]]],[10,R[75],E,E,7,[[["self"],["q"]],["bool"]]],[10,"get_mut",E,E,7,[[["self"],["q"]],[[R[1]],["v"]]]],[10,"insert",E,E,7,[[["self"],["k"],["v"]],[R[1]]]],[10,"remove",E,E,7,[[["self"],["q"]],[R[1]]]],[10,"append",E,E,7,[[["self"]]]],[10,"range",E,E,7,[[["self"],["r"]],["range"]]],[10,R[76],E,E,7,[[["self"],["r"]],[R[77]]]],[10,"entry",E,E,7,[[["self"],["k"]],["entry"]]],[10,R[78],E,E,7,[[["self"],["q"]],["self"]]],[10,"iter",E,E,7,[[["self"]],["iter"]]],[10,R[79],E,E,7,[[["self"]],["itermut"]]],[10,"keys",E,E,7,[[["self"]],["keys"]]],[10,"values",E,E,7,[[["self"]],["values"]]],[10,R[80],E,E,7,[[["self"]],[R[81]]]],[10,"len",E,E,7,[[["self"]],["usize"]]],[10,R[82],E,E,7,[[["self"]],["bool"]]],[8,R[92],E,E,N,N],[10,R[83],E,E,8,[[["self"],["r"]],["b"]]],[10,R[84],E,E,8,[[["self"],["r"]]]],[10,R[73],E,E,8,[[["self"]]]],[10,R[85],E,E,8,[[["self"],["x"],["y"]],[[R[4],[R[3]]],[R[3]]]]],[10,"swap",E,E,8,[[["self"],["usize"]],[[R[4],[R[3]]],[R[3]]]]],[8,R[93],E,E,N,N],[10,R[87],E,E,9,[[["self"],[R[96]]]]],[10,R[88],E,E,9,[[["self"],["m"],["n"]]]],[10,R[89],E,E,9,[[["self"],["m"]],[[R[1]],["n"]]]],[14,"vec2",E,"macro that creates a Vec<Vec> from an array of arrays with…",N,N],[14,"map",E,E,N,N],[11,"from",E,E,4,[[[T]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[2]]]],[11,"into",E,E,4,[[],[U]]],[11,R[8],E,E,4,[[[U]],[R[4]]]],[11,R[9],E,E,4,[[],[R[4]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[67],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[68]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[2]]]],[11,"into",E,E,5,[[],[U]]],[11,R[8],E,E,5,[[[U]],[R[4]]]],[11,R[9],E,E,5,[[],[R[4]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[67],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[68]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[8],E,E,0,[[[U]],[R[4]]]],[11,R[9],E,E,0,[[],[R[4]]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[67],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[68]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,R[8],E,E,1,[[[U]],[R[4]]]],[11,R[9],E,E,1,[[],[R[4]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[67],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[68]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[97],E,E,2,[[],["i"]]],[11,"into",E,E,2,[[],[U]]],[11,R[8],E,E,2,[[[U]],[R[4]]]],[11,R[9],E,E,2,[[],[R[4]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[67],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[68]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[97],E,E,3,[[],["i"]]],[11,"into",E,E,3,[[],[U]]],[11,R[8],E,E,3,[[[U]],[R[4]]]],[11,R[9],E,E,3,[[],[R[4]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[67],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[68]]]],[11,"from",R[74],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[8],E,E,6,[[[U]],[R[4]]]],[11,R[9],E,E,6,[[],[R[4]]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[67],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[68]]]],[11,"clear",R[72],E,1,[[["self"]]]],[11,"get",E,E,1,[[["self"],["q"]],[[R[1],["vec"]],["vec"]]]],[11,R[75],E,E,1,[[["self"],["q"]],["bool"]]],[11,"get_mut",E,E,1,[[["self"],["q"]],[["vec"],[R[1],["vec"]]]]],[11,"insert",E,E,1,[[["self"],[U],["vec"]],[[R[1],["vec"]],["vec"]]]],[11,"remove",E,E,1,[[["self"],["q"]],[[R[1],["vec"]],["vec"]]]],[11,"append",E,E,1,[[["self"]]]],[11,"range",E,E,1,[[["self"],["r"]],[["vec"],["range",["vec"]]]]],[11,R[76],E,E,1,[[["self"],["r"]],[[R[77],["vec"]],["vec"]]]],[11,"entry",E,E,1,[[["self"],[U]],[["vec"],["entry",["vec"]]]]],[11,R[78],E,E,1,[[["self"],["q"]],["self"]]],[11,"iter",E,E,1,[[["self"]],[["iter",["vec"]],["vec"]]]],[11,R[79],E,E,1,[[["self"]],[["itermut",["vec"]],["vec"]]]],[11,"keys",E,E,1,[[["self"]],[["vec"],["keys",["vec"]]]]],[11,"values",E,E,1,[[["self"]],[["values",["vec"]],["vec"]]]],[11,R[80],E,E,1,[[["self"]],[[R[81],["vec"]],["vec"]]]],[11,"len",E,E,1,[[["self"]],["usize"]]],[11,R[82],E,E,1,[[["self"]],["bool"]]],[11,R[83],E,E,1,[[["self"],["r"]],["table"]]],[11,R[84],E,E,1,[[["self"],["r"]]]],[11,R[73],E,E,1,[[["self"]]]],[11,R[85],E,"takes a string or usize and swaps the columns",1,[[["self"],[R[86]],["into",[R[86]]]],[[R[4],[R[3]]],[R[3]]]]],[11,"swap",E,E,1,[[["self"],["usize"]],[[R[4],[R[3]]],[R[3]]]]],[11,R[87],E,E,1,[[["self"],[R[2]],[R[96],[R[2],R[2]]]]]],[11,R[88],E,"add arbitrary data to table",1,[[["self"],[R[2]]]]],[11,R[89],E,"get arbitrary data from table",1,[[["self"],[R[2]]],[[R[2]],[R[1],[R[2]]]]]],[11,"next",E,E,2,[[["self"]],[R[1]]]],[11,"next",E,E,3,[[["self"]],[R[1]]]],[11,"eq",E,E,0,[[["self"],[R[71]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[71]]],["bool"]]],[11,"eq",E,E,1,[[["self"],["table"]],["bool"]]],[11,"ne",E,E,1,[[["self"],["table"]],["bool"]]],[11,"eq",R[74],E,6,[[["self"],[R[86]]],["bool"]]],[11,"ne",E,E,6,[[["self"],[R[86]]],["bool"]]],[11,"from",R[72],E,5,[[["error"]],["self"]]],[11,"from",E,E,5,[[[R[3]]],["self"]]],[11,"from",E,E,5,[[[R[19]]],["self"]]],[11,"from",R[74],E,6,[[[R[2]]],["self"]]],[11,"from",E,E,6,[[["str"]],["self"]]],[11,"from",E,E,6,[[["usize"]],["self"]]],[11,"clone",R[72],E,1,[[["self"]],["table"]]],[11,"fmt",E,E,4,[[[R[31]],["self"]],[R[4]]]],[11,"fmt",E,E,5,[[[R[31]],["self"]],[R[4]]]],[11,"fmt",E,E,4,[[["self"],[R[31]]],[R[4]]]],[11,"fmt",E,E,5,[[["self"],[R[31]]],[R[4]]]],[11,"fmt",E,E,0,[[["self"],[R[31]]],[R[4]]]],[11,"fmt",E,E,1,[[["self"],[R[31]]],[R[4]]]],[11,"fmt",E,E,2,[[["self"],[R[31]]],[R[4]]]],[11,"fmt",E,E,3,[[["self"],[R[31]]],[R[4]]]],[11,"fmt",R[74],E,6,[[["self"],[R[31]]],[R[4]]]],[11,"deserialize",R[72],E,1,[[["__d"]],[R[4]]]],[11,"serialize",E,E,1,[[["self"],["__s"]],[R[4]]]],[11,"cheese",E,E,10,[[]]]],"p":[[3,"NdTable"],[3,"Table"],[3,R[98]],[3,"Row"],[3,R[41]],[3,R[99]],[4,R[90]],[8,R[91]],[8,R[92]],[8,R[93]],[6,R[94]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);